{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","list","current","bgColor","boxAll","handleChange","event","setState","target","checked","console","log","componentDidMount","a","fetch","response","json","data","handleEnter","key","submit","handleInput","e","value","task","alert","push","todo","method","headers","body","JSON","stringify","remove","index","tasksToDo","splice","boxClick","className","type","onKeyPress","this","onChange","placeholder","onClick","map","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gSAsHeA,G,iNAlHbC,MAAQ,CACNC,KAAM,GACNC,QAAS,GACTC,QAAS,GACTC,QAAQ,G,EAIVC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEH,OAAQE,EAAME,OAAOC,UAAW,WAC9CC,QAAQC,IAAI,8BAA+B,EAAKX,MAAMI,Y,EAI1DQ,kB,sBAAoB,8BAAAC,EAAA,sEACKC,MAAM,oDADX,cACZC,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBP,QAAQC,IAAIM,GACZ,EAAKV,SAAS,CAACN,KAAMgB,EAAKA,OAJR,2C,EAOpBC,YAAc,SAAAZ,GACM,UAAdA,EAAMa,KACR,EAAKC,U,EAITC,YAAc,SAAAC,GACZ,EAAKf,SAAS,CAAEL,QAASoB,EAAEd,OAAOe,S,EAGpCH,OAAS,WACP,IAAII,EAAO,EAAKxB,MAAMC,KACtB,GAA0B,KAAvB,EAAKD,MAAME,QACZ,OAAOuB,MAAM,iBAEfD,EAAKE,KAAK,CAAEC,KAAM,EAAK3B,MAAME,UAC7B,EAAKK,SAAS,CAAEN,KAAMuB,EAAMtB,QAAS,KAErCQ,QAAQC,IAAI,EAAKX,MAAMC,MAGvBa,MAAM,uDAAwD,CAC1Dc,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACrBL,KAAM,EAAK3B,MAAME,a,EAKvB+B,OAAS,SAACC,EAAOV,GACf,IAAIW,EAAY,EAAKnC,MAAMC,KAC3BkC,EAAUC,OAAOF,EAAO,GACxB,EAAK3B,SAAS,CAACN,KAAMkC,IAErBrB,MAAM,qDAAsD,CACxDc,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACrBL,KAAMH,EAAKG,U,EAKjBU,SAAW,WACT,EAAK9B,SAAS,CACZJ,QAAS,S,wEAKH,IAAD,OACP,OACE,yBAAKmC,UAAU,cACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,SAEjB,yBAAKA,UAAU,WACb,0CACA,yBAAKA,UAAU,QACb,2BACEC,KAAK,OACLC,WAAYC,KAAKvB,YACjBwB,SAAUD,KAAKpB,YACfE,MAAOkB,KAAKzC,MAAME,QAClByC,YAAY,mBAEd,2BAAOJ,KAAK,SAASK,QAASH,KAAKrB,OAAQG,MAAQ,SAErD,yBAAKe,UAAU,YACZG,KAAKzC,MAAMC,KAAK4C,KAAI,SAACrB,EAAMU,GAC1B,OACE,yBAAKI,UAAU,QACb,yBAAKA,UAAU,QACb,2BAAOC,KAAK,WAAWO,GAAG,OAAOJ,SAAU,EAAKrC,eAChD,2BAAOc,IAAKe,GAAQV,EAAKG,OAE3B,yBAAKW,UAAU,SACb,4BAAQA,UAAU,QAAQM,QAAS,kBAAM,EAAKX,OAAOC,EAAOV,KAA5D,iB,GAtGFuB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.18409e17.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    list: [],\n    current: \"\",\n    bgColor: \"\",\n    boxAll: false\n  };\n\n\n  handleChange = event => {\n    this.setState({ boxAll: event.target.checked }, () => {\n      console.log(\"This returned true or false\", this.state.boxAll);\n    });\n  };\n\n  componentDidMount = async () => {\n    const response = await fetch(\"https://morning-bastion-71577.herokuapp.com/data\")\n    const data = await response.json()\n    console.log(data)\n    this.setState({list: data.data})\n  }\n\n  handleEnter = event => {\n    if (event.key === \"Enter\") {\n      this.submit();\n    }\n  };\n\n  handleInput = e => {\n    this.setState({ current: e.target.value });\n  };\n\n  submit = () => {\n    let task = this.state.list;\n    if(this.state.current === \"\"){\n      return alert(`enter a value`)\n    }\n    task.push({ todo: this.state.current});\n    this.setState({ list: task, current: \"\" });\n\n    console.log(this.state.list)\n    \n    \n    fetch(\"https://morning-bastion-71577.herokuapp.com/register\", {\n        method: \"POST\",\n        headers: {\"content-type\": \"application/json\"},\n        body: JSON.stringify({\n        todo: this.state.current\n      })\n    })\n  };\n\n  remove = (index, task) => {\n    let tasksToDo = this.state.list;\n    tasksToDo.splice(index, 1)\n    this.setState({list: tasksToDo})\n\n    fetch(\"https://morning-bastion-71577.herokuapp.com/delete\", {\n        method: \"POST\",\n        headers: {\"content-type\": \"application/json\"},\n        body: JSON.stringify({\n        todo: task.todo\n      })\n    })\n  }\n\n  boxClick = () => {\n    this.setState({\n      bgColor: \"red\"\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"background\">\n        <div className=\"wrap\">\n          <div className=\"bottom\"></div>\n          <div className=\"middle\"></div>\n          <div className=\"top\"></div>\n        </div>\n        <div className=\"address\">\n          <h1>To-Do List</h1>\n          <div className=\"form\">\n            <input\n              type=\"text\"\n              onKeyPress={this.handleEnter}\n              onChange={this.handleInput}\n              value={this.state.current}\n              placeholder=\"Give me a task\"\n            ></input>\n            <input type=\"submit\" onClick={this.submit} value = \"ADD\"></input>\n          </div>\n          <div className=\"contacts\">\n            {this.state.list.map((task, index) => {\n              return (\n                <div className=\"task\">\n                  <div className=\"left\">\n                    <input type=\"checkbox\" id=\"todo\" onChange={this.handleChange}></input>\n                    <label key={index}>{task.todo}</label>\n                  </div>\n                  <div className=\"right\">\n                    <button className=\"close\" onClick={() => this.remove(index, task)}>X</button>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}